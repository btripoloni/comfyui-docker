# Workflow configuration
name: Create and publish a Docker image

on:
  release:
    types: [published]
  workflow_dispatch:

# Defines two custom environment variables for the host name of the registry (ghcr.io for the GitHub Container Registry) and the name of the image,
# which is set to the name of the repository
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# This workflow has a single job, which builds the Docker image and publishes it to the GitHub Container Registry
jobs:

  # The `build-and-publish` job builds the Docker image and publishes it to the GitHub Container Registry
  build-and-publish:

    # The job is run on the latest version of Ubuntu; this is the environment in which the job will be run
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    # This job
    # 1) checks out the repository,
    # 2) logs in to the GitHub Container Registry,
    # 3) extracts metadata for the Docker image,
    # 4) builds and pushes the Docker image, and
    # 5) generates an artifact attestation for the image
    steps:

      # Checks out the repository so that the workflow can access the files in the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Logs in to the GitHub Container Registry using the account of the user that triggered the workflow run and the GitHub token that is
      # an automatically generated secret that is usually only used to access the repository (the permissions defined above allow the token to also
      # publish Docker images to the GitHub Container Registry) that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extracts metadata from the Git repository and GitHub, which are then used to label and tag the Docker image that will be built in the next
      # step; the "id" property specifies that the output of this step will be available in subsequent steps under the name "metadata"; tags for the
      # SHA of the commit, the full semantic version extracted from the current tag (e.g., tag "v1.2.3" will be extracted as "1.2.3"), and the major
      # and minor version extracted from the current version (e.g., tag "v1.2.3" will be extracted as "1.2"), as well as a "latest" tag are added;
      # besides the hardcoded labels for the title and authors of the image, the GitHub description, GitHub license, GitHub revision, GitHub source
      # URL, GitHub URL, and creation date and time are extracted as labels
      - name: Get ComfyUI and ComfyUI-Manager tags from Dockerfile
        id: get_tags
        run: |
          COMFYUI_TAG=$(grep '^ENV COMFYUI_TAG=' Dockerfile | cut -d'=' -f2)
          COMFYUI_MANAGER_TAG=$(grep '^ENV COMFYUI_MANAGER_TAG=' Dockerfile | cut -d'=' -f2)
          echo "COMFYUI_TAG=$COMFYUI_TAG" >> $GITHUB_ENV
          echo "COMFYUI_MANAGER_TAG=$COMFYUI_MANAGER_TAG" >> $GITHUB_ENV

      - name: Extract Tags & Labels for Docker
        id: docker-image-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.COMFYUI_TAG }}-${{ env.COMFYUI_MANAGER_TAG }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=ComfyUI
            org.opencontainers.image.authors=Bruno Tripoloni <bruno.tripoloni@proton.me>
            org.opencontainers.image.version=${{ env.COMFYUI_TAG }}-${{ env.COMFYUI_MANAGER_TAG }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      # Builds the Docker image for ComfyUI; if the build succeeds, it is pushed to the GitHub Container Registry; the "context" parameter specifies
      # the build context, which is the directory that contains the Dockerfile; the tags and labels extracted in the previous step are used to tag
      # and label the image
      - name: Build and Push Docker Image
        id: build-and-push-docker-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.docker-image-metadata.outputs.tags }}
          labels: ${{ steps.docker-image-metadata.outputs.labels }}

      # Generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built; it increases supply chain
      # security for people who consume the image
      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-and-push-docker-image.outputs.digest }}
