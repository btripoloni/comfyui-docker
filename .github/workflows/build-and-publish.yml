# Workflow configuration
name: Create and publish a Docker image

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight (UTC)

# Defines two custom environment variables for the host name of the registry (ghcr.io for the GitHub Container Registry) and the name of the image,
# which is set to the name of the repository
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# This workflow has a single job, which builds the Docker image and publishes it to the GitHub Container Registry
jobs:

  # The `build-and-publish` job builds the Docker image and publishes it to the GitHub Container Registry
  build-and-publish:

    # This job is only run if the workflow was triggered by a tag push or manually; it is not run if the workflow was triggered by a pull request
    if: ${{ github.actor != 'github-actions[bot]' }}
    # The job is run on the latest version of Ubuntu; this is the environment in which the job will be run
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    # This job 1) checks out the repository, 2) logs in to the GitHub Container Registry, 3) extracts metadata for the Docker image, 4) builds and
    # pushes the Docker image, and 5) generates an artifact attestation for the image
    steps:

      # Checks out the repository so that the workflow can access the files in the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Checks if there is a new version of ComfyUI
      # Step: Check for new ComfyUI version
      - name: Check for new ComfyUI version
        id: check-version
        run: |
          set -e
          echo "Fetching latest ComfyUI version..."
          LATEST_COMFYUI_VERSION=$(git ls-remote --tags https://github.com/comfyanonymous/ComfyUI.git | awk -F'/' '{print $NF}' | sort -V | tail -n1 || true)
          echo "Fetching latest ComfyUI-Manager version..."
          LATEST_COMFYUI_MANAGER_VERSION=$(git ls-remote --tags https://github.com/ltdrdata/ComfyUI-Manager.git | awk -F'/' '{print $NF}' | sort -V | tail -n1 || true)

          if [[ -z "$LATEST_COMFYUI_VERSION" || -z "$LATEST_COMFYUI_MANAGER_VERSION" ]]; then
            echo "Error: Unable to fetch the latest versions."
            exit 1
          fi

          CURRENT_COMFYUI_VERSION=$(grep -oP 'git checkout tags/\K[^ ]+' Dockerfile)
          echo "Latest ComfyUI version: $LATEST_COMFYUI_VERSION"
          echo "Current ComfyUI version in Dockerfile: $CURRENT_COMFYUI_VERSION"

          if [ "$LATEST_COMFYUI_VERSION" = "$CURRENT_COMFYUI_VERSION" ]; then
            echo "new_version=false" >> $GITHUB_ENV
          else
            echo "new_version=true" >> $GITHUB_ENV
          fi

      # Step: Validate versions
      - name: Validate versions
        run: |
          if [[ -z "$LATEST_COMFYUI_VERSION" || -z "$LATEST_COMFYUI_MANAGER_VERSION" ]]; then
            echo "Error: Unable to fetch the latest versions."
            exit 1
          fi

      # Skips the workflow if there is no new version
      - name: Skip build if no new version
        if: ${{ env.new_version == 'false' }}
        run: exit 0

      # Fetches the latest tags for ComfyUI and ComfyUI Manager and updates the Dockerfile
      - name: Update Dockerfile with latest versions
        if: ${{ env.new_version == 'true' }}
        run: |
          # Get the latest tags
          COMFYUI_LATEST_TAG=$(git ls-remote --tags https://github.com/comfyanonymous/ComfyUI.git | awk -F'/' '{print $NF}' | sort -V | tail -n1)
          COMFYUI_MANAGER_LATEST_TAG=$(git ls-remote --tags https://github.com/ltdrdata/ComfyUI-Manager.git | awk -F'/' '{print $NF}' | sort -V | tail -n1)

          # Update the Dockerfile in a single pass
          sed -i -E "s|(git checkout tags/)[^ ]+|\1$COMFYUI_LATEST_TAG|g; s|(git checkout tags/)[^ ]+|\1$COMFYUI_MANAGER_LATEST_TAG|g" Dockerfile

          # Commit the changes if the Dockerfile was updated
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git diff --quiet || git commit -am "Update ComfyUI and ComfyUI Manager to latest versions"

      # Logs in to the GitHub Container Registry using the account of the user that triggered the workflow run and the GitHub token that is
      # an automatically generated secret that is usually only used to access the repository (the permissions defined above allow the token to also
      # publish Docker images to the GitHub Container Registry) that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extracts metadata from the Git repository and GitHub, which are then used to label and tag the Docker image that will be built in the next
      # step; the "id" property specifies that the output of this step will be available in subsequent steps under the name "metadata"; tags for the
      # SHA of the commit, the full semantic version extracted from the current tag (e.g., tag "v1.2.3" will be extracted as "1.2.3"), and the major
      # and minor version extracted from the current version (e.g., tag "v1.2.3" will be extracted as "1.2"), as well as a "latest" tag are added;
      # besides the hardcoded labels for the title and authors of the image, the GitHub description, GitHub license, GitHub revision, GitHub source
      # URL, GitHub URL, and creation date and time are extracted as labels
      - name: Extract Tags & Labels for Docker
        id: docker-image-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.versions.outputs.COMFYUI_VERSION }}
            type=semver,pattern={{version}}-comfyui-${{ steps.versions.outputs.COMFYUI_VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=ComfyUI
            org.opencontainers.image.authors=Bruno Tripoloni <bruno.tripoloni@proto>

      # Builds the Docker image for ComfyUI; if the build succeeds, it is pushed to the GitHub Container Registry; the "context" parameter specifies
      # the build context, which is the directory that contains the Dockerfile; the tags and labels extracted in the previous step are used to tag
      # and label the image
      - name: Build and Push Docker Image
        id: build-and-push-docker-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
          tags: ${{ steps.docker-image-metadata.outputs.tags }}
          labels: ${{ steps.docker-image-metadata.outputs.labels }}

      # Generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built; it increases supply chain
      # security for people who consume the image
      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-and-push-docker-image.outputs.digest }}
